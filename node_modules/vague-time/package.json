{
  "name": "vague-time",
  "version": "1.1.0",
  "description": "A tiny, multi-lingual library that formats precise time differences as a vague/fuzzy time, e.g. 'just now' or 'in 2 hours'.",
  "homepage": "https://github.com/philbooth/vagueTime.js",
  "bugs": {
    "url": "https://github.com/philbooth/vagueTime.js/issues"
  },
  "license": "MIT",
  "author": {
    "name": "Phil Booth",
    "email": "pmbooth@gmail.com",
    "url": "https://github.com/philbooth"
  },
  "main": "./lib/vagueTime",
  "repository": {
    "type": "git",
    "url": "https://github.com/philbooth/vagueTime.js.git"
  },
  "keywords": [
    "time",
    "date",
    "fuzzy",
    "vague",
    "estimate"
  ],
  "devDependencies": {
    "jshint": "2.4.x",
    "commander": "2.2.x",
    "mocha": "1.17.x",
    "chai": "1.9.x",
    "uglify-js": "2.4.x"
  },
  "scripts": {
    "lint": "./node_modules/.bin/jshint ./src/vagueTime.js --config config/jshint.json",
    "build": "npm run build-da && npm run build-de && npm run build-en && npm run build-fr && npm run build-nl && npm run build-jp && npm run build-ko && npm run build-zh && npm run build-enda && npm run build-ende && npm run build-enfr && npm run build-ennl && npm run build-enjp && npm run build-enko && npm run build-enzh && npm run build-jpkozh && npm run build-all",
    "build-da": "./build.js -l da",
    "build-de": "./build.js -l de",
    "build-en": "./build.js -l en",
    "build-fr": "./build.js -l fr",
    "build-nl": "./build.js -l nl",
    "build-jp": "./build.js -l jp",
    "build-ko": "./build.js -l ko",
    "build-zh": "./build.js -l zh",
    "build-enda": "./build.js -l en,da",
    "build-ende": "./build.js -l en,de",
    "build-enfr": "./build.js -l en,fr",
    "build-ennl": "./build.js -l en,nl",
    "build-enjp": "./build.js -l en,jp",
    "build-enko": "./build.js -l en,ko",
    "build-enzh": "./build.js -l en,zh",
    "build-jpkozh": "./build.js -l jp,ko,zh",
    "build-all": "./build.js -d en",
    "test": "./node_modules/.bin/mocha --ui tdd --reporter spec --colors ./test/vagueTime.js",
    "minify": "./node_modules/.bin/uglifyjs ./lib/vagueTime.js --compress --mangle --output ./lib/vagueTime.min.js"
  },
  "contributors": [
    {
      "name": "Phil Booth",
      "email": "pmbooth@gmail.com",
      "url": "https://github.com/philbooth"
    },
    {
      "name": "Seth Cameo",
      "url": "https://github.com/seth-cameo"
    },
    {
      "name": "Pepijn de Vos",
      "url": "https://github.com/pepijndevos"
    },
    {
      "name": "JayceTDE",
      "url": "https://github.com/JayceTDE"
    },
    {
      "name": "addaleax",
      "url": "https://github.com/addaleax"
    },
    {
      "name": "Ivan MiriÄ‡",
      "url": "https://github.com/imiric"
    },
    {
      "name": "Baptiste Fontaine",
      "url": "https://github.com/bfontaine"
    },
    {
      "name": "Nico Haesler",
      "url": "https://github.com/nhaesler"
    },
    {
      "name": "Carter Chen",
      "url": "https://github.com/didxga"
    }
  ],
  "readme": "# vagueTime.js\n\n[![Build status][ci-image]][ci-status]\n\nA tiny, multi-lingual JavaScript library\nthat formats precise time differences\nas a vague/fuzzy time,\ne.g. 'just now' or 'in 2 hours'.\nSupports English, German, French, Dutch, Danish, Japanese, Korean and Chinese phrases.\n\n* [Why would I want that?](#why-would-i-want-that)\n* [What alternative libraries are there?](#what-alternative-libraries-are-there)\n* [How tiny is it?](#how-tiny-is-it)\n* [How do I install it?](#how-do-i-install-it)\n* [How do I use it?](#how-do-i-use-it)\n    * [Loading the library](#loading-the-library)\n    * [Calling the exported functions](#calling-the-exported-functions)\n    * [Examples](#examples)\n* [How do I build it?](#how-do-i-build-it)\n* [What license is it released under?](#what-license-is-it-released-under)\n\n## Why would I want that?\n\nDisplaying precise dates and times\ncan give a website a formal and officious feel.\nUsing fuzzy or vague time phrases\nlike 'just now' or '3 days ago'\ncan contribute to a much friendlier interface.\n\nvagueTime.js provides a small, clean API\nfor translating timestamps\ninto those user-friendly phrases,\nheavily supported by unit tests.\nVague time strings can be returned\nin English, German, French, Dutch, Danish, Japanese, Korean or Chinese.\n\n## What alternative libraries are there?\n\n* [date.js][date];\n* [moment.js][moment];\n* [xdate];\n* [countdown.js][countdown].\n\n## How tiny is it?\n\nThe library can be built\nwith support for any combination\nof English, German, French, Dutch, Danish, Japanese, Korean and Chinese languages.\nSingle-language builds\nare typically around\n4.3 kb unminified with comments,\n1.3 kb minified\nor 0.7 kb minified + gzipped.\n\nThe largest build,\ncontaining all supported languages,\nis 8 kb unminified with comments, 3.1 kb minified\nor 1.3 kb minified + gzipped.\n\n## How do I install it?\n\nAny of the following will do:\n\n```\nnpm install vague-time\n\njam install vague-time\n\nbower install vague-time\n\ncomponent install philbooth/vagueTime.js\n\ngit clone git@github.com:philbooth/vagueTime.js.git\n```\n\n## How do I use it?\n\n### Loading the library\n\nIf you are running in\n[Node.js][node],\n[Browserify]\nor another CommonJS-style\nenvironment,\nyou can `require`\nvagueTime.js like so:\n\n```javascript\nvar vagueTime = require('vague-time');\n```\n\nIt also the supports\nthe AMD-style format\npreferred by [Require.js][require]:\n\n```javascript\nrequire.config({\n    paths: {\n        vague-time: 'vagueTime.js/lib/vagueTime'\n    }\n});\n\nrequire([ 'vague-time' ], function (vagueTime) {\n});\n```\n\nThe default module\ncontains all of the supported languages,\nif you want to load a custom build\nyou must make sure\nthat you reference that build explicitly.\n\nIf you are\nincluding vagueTime.js\nwith an HTML `<script>` tag,\nor neither of the above environments\nare detected,\nthe interface will be globally available\nas `vagueTime`.\n\n### Calling the exported functions\n\nvagueTime.js exports a single public function, `get`,\nwhich returns a vague time string\nbased on the argument(s) that you pass it.\n\nThe arguments are passed as properties\n on a single options object:\n\n* `from`:\n  Timestamp or `Date` instance denoting the origin point from which the vague time will be calculated.\n  Defaults to `Date.now()`.\n* `to`:\n  Timestamp or `Date` instance denoting the target point to which the vague time will be calculated.\n  Defaults to `Date.now()`.\n* `units`:\n  String denoting the units that the `from` and `to` timestamps are specified in.\n  May be `'s'` for seconds or `'ms'` for milliseconds.\n  Defaults to `'ms'`.\n  This property has no effect\n  when `from` and `to` are `Date` instances\n  rather than timestamps.\n* `lang`:\n  String denoting the output language.\n  May be `'en'` (English),\n  `'de'` (German),\n  `'fr'` (French),\n  `'nl'` (Dutch),\n  `'da'` (Danish),\n  `'jp'` (Japanese),\n  `'ko'` (Korean) or\n  `'zh'` (Chinese.\n  The default is set by the build options.\n\nEssentially,\nif `to` is less than `from`,\nthe returned vague time will indicate\nsome point in the past.\nIf `to` is greater than `from`,\nit will indicate\nsome point in the future.\n\n### Examples\n\n```javascript\nvagueTime.get({\n    from: 60,\n    to: 0,\n    units: 's'\n}); // returns '1 minute ago'\n\nvagueTime.get({\n    from: 0,\n    to: 60,\n    units: 's'\n}); // returns 'in 1 minute'\n\nvagueTime.get({\n    from: 7200,\n    to: 0,\n    units: 's'\n}); // returns '2 hours ago'\n\nvagueTime.get({\n    from: 0,\n    to: 7200,\n    units: 's',\n    lang: 'de'\n}); // returns 'vor 2 Stunden'\n\nvagueTime.get({\n    from: new Date(2015, 0, 3),\n    to: new Date(2014, 11, 31),\n    lang: 'de'\n}); // returns 'in 3 Tagen'\n\nvagueTime.get({\n    from: 0,\n    to: 259200,\n    units: 's',\n    lang: 'fr'\n}); // returns 'il y a 3 jours'\n\nvagueTime.get({\n    from: new Date(2015, 0, 27),\n    to: new Date(2014, 11, 31),\n    lang: 'fr'\n}); // returns 'dans 4 semaines'\n```\n\n## How do I build it?\n\nThe build environment relies on\nNode.js,\n[NPM],\n[JSHint],\n[Commander]\n[Mocha],\n[Chai] and\n[UglifyJS].\nAssuming that you already have Node/NPM set up,\nyou just need to run `npm install`\nto install all of the dependencies as listed in `package.json`.\n\nYou can then lint the source module\nwith the command `npm run lint`.\n\nYou can run the standard build process\nwith the command `npm run build`\nor run a custom build using the build script:\n\n```\n./build.js -l <comma-separated list of language codes> -d <default language code>\n```\n\nThe unit tests are in `test/vagueTime.js`.\nYou can run them with the command `npm test`.\nTo run the tests in a web browser,\nopen `test/vagueTime.html`.\n\n## What license is it released under?\n\n[MIT][license]\n\n[ci-image]: https://secure.travis-ci.org/philbooth/vagueTime.js.png?branch=master\n[ci-status]: http://travis-ci.org/#!/philbooth/vagueTime.js\n[vague-date]: https://github.com/philbooth/vagueDate.js\n[date]: http://www.datejs.com/\n[moment]: http://momentjs.com/\n[xdate]: http://arshaw.com/xdate\n[countdown]: http://countdownjs.org/\n[node]: http://nodejs.org/\n[browserify]: http://browserify.org/\n[require]: http://requirejs.org/\n[npm]: https://npmjs.org/\n[jshint]: https://github.com/jshint/node-jshint\n[commander]: https://github.com/visionmedia/commander.js\n[mocha]: http://visionmedia.github.com/mocha\n[chai]: http://chaijs.com/\n[uglifyjs]: https://github.com/mishoo/UglifyJS\n[license]: https://github.com/philbooth/vagueTime.js/blob/master/COPYING\n\n",
  "readmeFilename": "README.md",
  "_id": "vague-time@1.1.0",
  "dist": {
    "shasum": "32e232b0bec48d98570b1a79d2643008ebd13b5b"
  },
  "_from": "vague-time@",
  "_resolved": "https://registry.npmjs.org/vague-time/-/vague-time-1.1.0.tgz"
}
