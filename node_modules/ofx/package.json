{
  "name": "ofx",
  "description": "Parse OFX files into a usable data structure.",
  "version": "0.2.0",
  "author": {
    "name": "Andrew Chilton",
    "email": "chilts@appsattic.com",
    "url": "http://www.chilts.org/"
  },
  "homepage": "https://github.com/appsattic/ofx",
  "contributors": [
    {
      "name": "Christian Sullivan",
      "url": "http://euforic.co/"
    }
  ],
  "devDependencies": {
    "tap": "~0.4.0",
    "optimist": "~0.3.x"
  },
  "dependencies": {
    "xml2json": "0.3.2"
  },
  "main": "./ofx.js",
  "directories": {},
  "engines": {
    "node": ">= 0.6.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/appsattic/ofx.git"
  },
  "bugs": {
    "url": "http://github.com/appsattic/ofx/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/appsattic/ofx/raw/master/LICENSE"
    }
  ],
  "keywords": [
    "ofx",
    "open financial exchange bank banking export"
  ],
  "scripts": {
    "test": "tap test/*.js"
  },
  "readme": "```\n _______  _______          \n(  ___  )(  ____ \\|\\     /|\n| (   ) || (    \\/( \\   / )\n| |   | || (__     \\ (_) / \n| |   | ||  __)     ) _ (  \n| |   | || (       / ( ) \\ \n| (___) || )      ( /   \\ )\n(_______)|/       |/     \\|\n                           \n```\n\nParse Open Financial Exchange (OFX) files into a usable data structure. Serialize objects into OFX file format.\n\n# parsing #\n\n```js\nvar ofx = require('ofx');\n\nfs.readFile('Account-1234-5678.ofx', 'utf8', function(err, ofxData) {\n    if (err) throw err;\n\n    var data = ofx.parse(ofxData);\n    console.dir(data);\n});\n```\n\n# serializing #\n\n```js\nvar ofx = require('ofx');\n\nvar header = {\n    OFXHEADER: '100',\n    DATA: 'OFXSGML',\n    VERSION: '103',\n    SECURITY: 'NONE',\n    ENCODING: 'USASCII',\n    CHARSET: '1252',\n    COMPRESSION: 'NONE',\n    OLDFILEUID: 'NONE',\n    NEWFILEUID: 'unique id here'\n};\n\nvar body = {\n    SIGNONMSGSRQV1: {\n      SONRQ: {\n        DTCLIENT: 'value',\n        USERID: 'user id',\n        USERPASS: 'password',\n        LANGUAGE: 'ENG',\n        FI: {\n          ORG: 'org',\n          FID: 'fid'\n        },\n        APPID: 'QWIN',\n        APPVER: '2100',\n        CLIENTUID: 'needed by some places'\n      }\n    }\n};\n\nvar ofx_string = ofx.serialize(header, body);\nconsole.log(ofx_string);\n```\n\n# Data #\n\nIn your data returned, you will have the following properties:\n\n* OFX - a dump of the XML parsing as a js object\n* header - just the 'key:values' pairs from the top of the OFX file\n\n# caveats #\n\nThis file format is yucky, horrible and just silly. This module helps parse the ones I know about. And it doesn't do it in a nice way either. It may or may not work for your own use - only by trying it will you find out.\n\nIf you discover a broken file, please submit an issue with the sample file.\n\nThis module takes the OFX format and does the following:\n\n* splits off the initial set of metadata (the \"Key:Value\" lines)\n* tries to mechnically turn the SGML into a valid XML format\n* turns the XML into a JavaScript data structure\n\n# Credits #\n\nThanks to [Christian Sullivan](https://github.com/euforic) for writing\n[banking.js](https://github.com/euforic/banking.js), upon which some of this code is based. Many thanks for letting me\nuse it.\n\n# Author #\n\nWritten by [Andrew Chilton](http://chilts.org/) - [Blog](http://chilts.org/blog/) -\n[Twitter](https://twitter.com/andychilton).\n\n# License #\n\nThe MIT License : http://appsattic.mit-license.org/2012/\n",
  "readmeFilename": "README.md",
  "_id": "ofx@0.2.0",
  "dist": {
    "shasum": "6f53a369f3522fb791dd7a56fc49cc95e6c72521"
  },
  "_from": "ofx@",
  "_resolved": "https://registry.npmjs.org/ofx/-/ofx-0.2.0.tgz"
}
